#ifndef _TIMER_CONF_H_
#define _TIMER_CONF_H_

/**
  * @brief TIMER_CLK = PCLK/(PRESCALER+1)/DIVIDER
  *   PRESCALER = 1~255
  *   DIVIDER = 1,2,4,8,16,TCLK
  *   DEADZONE=0~254
  *   real dead zone length is DEADZONE+1
  */


typedef enum {
	TIMER_CFG0_DEADZONE_VALUE_0_254  = 0x1,
	TIMER_CFG0_PRESCALER_VALUE_1_255 = 0x1,
	TIMER_CFG0_x_MASK                = 0xFF,
	TIMER_CFG0_DEADZONE              = 16,
	TIMER_CFG0_PRESCALER234          = 8,
	TIMER_CFG0_PRESCALER01           = 0,
} TIMER_CFG0Enum;

typedef enum {
	TIMER_CFG1_Tx_MASK       = 0xF,
	TIMER_CFG1_Tx_DIVIDER_1  = 0x0,
	TIMER_CFG1_Tx_DIVIDER_2  = 0x1,
	TIMER_CFG1_Tx_DIVIDER_4  = 0x2,
	TIMER_CFG1_Tx_DIVIDER_8  = 0x3,
	TIMER_CFG1_Tx_DIVIDER_16 = 0x4,
	TIMER_CFG1_Tx_SCLK_PWM   = 0x5,
	TIMER_CFG1_T0            = 0,
	TIMER_CFG1_T1            = 4,
	TIMER_CFG1_T2            = 8,
	TIMER_CFG1_T3            = 12,
	TIMER_CFG1_T4            = 16,
} TIMER_CFG1Enum;

typedef enum {
	TIMER_CON_T0_STOP              = ~(0x1<<0),
	TIMER_CON_T0_START             = 0x1<<0,
	TIMER_CON_T0_MANUAL_UPDATE_DIS = ~(0x1<<1),
	TIMER_CON_T0_MANUAL_UPDATE_EN  = 0x1<<1,
	TIMER_CON_T0_OUT_INVERTER_OFF  = ~(0x1<<2),
	TIMER_CON_T0_OUT_INVERTER_ON   = 0x1<<2,
	TIMER_CON_T0_AUTO_RELOAD_OFF   = ~(0x1<<3),
	TIMER_CON_T0_AUTO_RELOAD_ON    = 0x1<<3,
	TIMER_CON_DEADZONE_DIS         = ~(0x1<<4),
	TIMER_CON_DEADZONE_EN          = 0x1<<4,
	TIMER_CON_T1_STOP              = ~(0x1<<8),
	TIMER_CON_T1_START             = 0x1<<8,
	TIMER_CON_T1_MANUAL_UPDATE_DIS = ~(0x1<<9),
	TIMER_CON_T1_MANUAL_UPDATE_EN  = 0x1<<9,
	TIMER_CON_T1_OUT_INVERTER_OFF  = ~(0x1<<10),
	TIMER_CON_T1_OUT_INVERTER_ON   = 0x1<<10,
	TIMER_CON_T1_AUTO_RELOAD_OFF   = ~(0x1<<11),
	TIMER_CON_T1_AUTO_RELOAD_ON    = 0x1<<11,
	TIMER_CON_T2_STOP              = ~(0x1<<12),
	TIMER_CON_T2_START             = 0x1<<12,
	TIMER_CON_T2_MANUAL_UPDATE_DIS = ~(0x1<<13),
	TIMER_CON_T2_MANUAL_UPDATE_EN  = 0x1<<13,
	TIMER_CON_T2_OUT_INVERTER_OFF  = ~(0x1<<14),
	TIMER_CON_T2_OUT_INVERTER_ON   = 0x1<<14,
	TIMER_CON_T2_AUTO_RELOAD_OFF   = ~(0x1<<15),
	TIMER_CON_T2_AUTO_RELOAD_ON    = 0x1<<15,
	TIMER_CON_T3_STOP              = ~(0x1<<16),
	TIMER_CON_T3_START             = 0x1<<16,
	TIMER_CON_T3_MANUAL_UPDATE_DIS = ~(0x1<<17),
	TIMER_CON_T3_MANUAL_UPDATE_EN  = 0x1<<17,
	TIMER_CON_T3_OUT_INVERTER_OFF  = ~(0x1<<18),
	TIMER_CON_T3_OUT_INVERTER_ON   = 0x1<<18,
	TIMER_CON_T3_AUTO_RELOAD_OFF   = ~(0x1<<19),
	TIMER_CON_T3_AUTO_RELOAD_ON    = 0x1<<19,
	TIMER_CON_T4_STOP              = ~(0x1<<20),
	TIMER_CON_T4_START             = 0x1<<20,
	TIMER_CON_T4_MANUAL_UPDATE_DIS = ~(0x1<<21),
	TIMER_CON_T4_MANUAL_UPDATE_EN  = 0x1<<21,
	TIMER_CON_T4_AUTO_RELOAD_OFF   = ~(0x1<<22),
	TIMER_CON_T4_AUTO_RELOAD_ON    = 0x1<<22,
} TIMER_CONEnum;

/**
 * @brief Write TIMER_INT_CSTAT_Tx_STAT to clear interrupt.
 */
typedef enum {
	TIMER_INT_CSTAT_T0_DIS  = 0x0<<0,
	TIMER_INT_CSTAT_T0_EN   = 0x1<<0,
	TIMER_INT_CSTAT_T1_DIS  = 0x0<<1,
	TIMER_INT_CSTAT_T1_EN   = 0x1<<1,
	TIMER_INT_CSTAT_T2_DIS  = 0x0<<2,
	TIMER_INT_CSTAT_T2_EN   = 0x1<<2,
	TIMER_INT_CSTAT_T3_DIS  = 0x0<<3,
	TIMER_INT_CSTAT_T3_EN   = 0x1<<3,
	TIMER_INT_CSTAT_T4_DIS  = 0x0<<4,
	TIMER_INT_CSTAT_T4_EN   = 0x1<<4,
	TIMER_INT_CSTAT_T0_STAT = 0x1<<5,
	TIMER_INT_CSTAT_T1_STAT = 0x1<<6,
	TIMER_INT_CSTAT_T2_STAT = 0x1<<7,
	TIMER_INT_CSTAT_T3_STAT = 0x1<<8,
	TIMER_INT_CSTAT_T4_STAT = 0x1<<9,
} TIMER_INT_CSTATEnum;

#endif /* _TIMER_CONF_H_ */
